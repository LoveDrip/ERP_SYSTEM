{"version":3,"sources":["views/inventory/InventtoryBlockProductReport/ReportBlock/BasicInfo.js","views/inventory/InventtoryBlockProductReport/ReportBlock/PaymentForm.js","views/inventory/InventtoryBlockProductReport/ReportBlock/Review.js","views/inventory/InventtoryBlockProductReport/ReportBlock/index.js","views/inventory/InventtoryBlockProductReport/BlockProductReportCreateData.js"],"names":["BasicInfo","styled","TableCell","theme","tableCellClasses","head","maxWidth","backgroundColor","palette","common","black","color","white","shippingData","handleNext","setShippingData","formik","useFormik","initialValues","mainContractor","onSubmit","values","SaveTableData","dispatch","useDispatch","useState","AddtableData","setAddtable","a","SaveInventoryData","handleSubmit","id","Grid","container","spacing","item","xs","TableContainer","Table","sx","minWidth","size","TableHead","TableRow","align","colSpan","TableBody","map","row","hover","Object","keys","i","TextField","value","onChange","e","column","updatedData","handleInputChange","target","variant","pr","IconButton","onClick","filter","fontSize","Stack","direction","justifyContent","AnimateButton","Button","my","ml","newRow","length","looktreatment","Quantitym2","Length","QuantitySlabs","Number","Quantitygel","Ihermalgel","sawingnumber","Swingmachinenumber","thickness","material","BlockNumber","datesawing","type","PaymentForm","paymentData","handleBack","cardName","cardNumber","inventorydataState","useTheme","useSelector","state","inventory","AllDataList","setAllDataList","editid","setEditId","useEffect","filterdata","inventorydata","some","DeleteRowData","style","display","StyledTableCell","Review","steps","getStepContent","step","setErrorIndex","setPaymentData","Error","InterimInvoiceWizard","React","activeStep","setActiveStep","errorIndex","MainCard","title","Stepper","pt","pb","label","index","labelProps","optional","Typography","error","Step","StepLabel","gutterBottom","component","Link","to","FormsWizard","gridSpacing"],"mappings":"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","file":"static/js/206.8f676c06.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\n//Icons\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport { SaveInventoryData } from 'store/slices/inventoryteam';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\n\r\nconst StyledTableCellGroup = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white\r\n    },\r\n}));\r\n\r\n// ==============================|| FORM WIZARD - VALIDATION  ||============================== //\r\n\r\nconst BasicInfo = ({ shippingData, setShippingData, handleNext }) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            mainContractor: shippingData.mainContractor,\r\n        },\r\n        onSubmit: (values) => {\r\n            SaveTableData();\r\n            handleNext();\r\n        }\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    const [AddtableData, setAddtable] = useState([]);\r\n\r\n    const Addtablerow = () => {\r\n        const newRow = { id: AddtableData.length + 1, looktreatment: \"\", Quantitym2: \"\", Length: \"\", QuantitySlabs: \"\", Number: \"\", Quantitygel: \"\", Ihermalgel: \"\", sawingnumber: \"34533\", Swingmachinenumber: \"34533\", thickness: \"\", material: \"\", BlockNumber: \"\", datesawing: \"\" };\r\n        setAddtable([...AddtableData, newRow]);\r\n    }\r\n\r\n    const handleInputChange = (id, column, value) => {\r\n        const updatedData = AddtableData.map((row) =>\r\n            row.id === id ? { ...row, [column]: value } : row\r\n        );\r\n        setAddtable(updatedData);\r\n    };\r\n\r\n    const DeleteRowData = (id) => () => {\r\n        setAddtable(AddtableData.filter((row) => row.id != id));\r\n    }\r\n\r\n    const SaveTableData = async () => {\r\n        await dispatch(SaveInventoryData(AddtableData));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align='center' ></TableCell>\r\n                                        <TableCell align='center' colSpan={3}>Quantity M^2</TableCell>\r\n                                        <TableCell align='center' ></TableCell>\r\n                                        <TableCell align='center' colSpan={3}>Quantity M^2</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell align='center'>Look Treatment</TableCell>\r\n                                        <TableCell align='center'>Quantity m^2</TableCell>\r\n                                        <TableCell align='center'>Length</TableCell>\r\n                                        <TableCell align='center'>Quantity of slabs</TableCell>\r\n                                        <TableCell align='center'>Number of backs</TableCell>\r\n                                        <TableCell align='center'>Quantity of lboxv gel</TableCell>\r\n                                        <TableCell align='center'>Ihermal wrap lboxv gel</TableCell>\r\n                                        <TableCell align='center'>Number of sawing number</TableCell>\r\n                                        <TableCell align='center'>Swing machine number</TableCell>\r\n                                        <TableCell align='center'>Thickness(cm)</TableCell>\r\n                                        <TableCell align='center'>Material</TableCell>\r\n                                        <TableCell align='center'>Block number</TableCell>\r\n                                        <TableCell align='center'>Date of Sawing</TableCell>\r\n                                        <TableCell align='center'>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n\r\n                                    {AddtableData.map((row) => (\r\n                                        <TableRow hover key={row.id}>\r\n                                            {Object.keys(row).map((item, i) => (\r\n                                                <>\r\n                                                    {item != \"id\" && (\r\n                                                        <TableCell align=\"center\" key={i}>\r\n                                                            <TextField\r\n                                                                value={row[item]}\r\n                                                                onChange={(e) => handleInputChange(row.id, item, e.target.value)}\r\n                                                                id=\"standard-basic\" variant=\"standard\"\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    )}\r\n                                                </>\r\n                                            ))}\r\n\r\n                                            <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                <IconButton onClick={DeleteRowData(row.id)} size=\"large\">\r\n                                                    <DeleteIcon\r\n                                                        fontSize=\"small\"\r\n                                                        aria-controls=\"menu-popular-card-1\"\r\n                                                        aria-haspopup=\"true\"\r\n                                                        sx={{ color: 'grey.500' }}\r\n                                                    />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} onClick={Addtablerow}>\r\n                                    AddTable\r\n                                </Button>\r\n                                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\">\r\n                                    Next\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nBasicInfo.propTypes = {\r\n    shippingData: PropTypes.object,\r\n    setShippingData: PropTypes.func,\r\n    handleNext: PropTypes.func,\r\n    setErrorIndex: PropTypes.func\r\n};\r\n\r\nexport default BasicInfo;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\n//Icons\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport EditAttributesSharp from '@mui/icons-material/Edit';\r\n\r\n//redux\r\nimport { SaveInventoryData } from 'store/slices/inventoryteam';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\n\r\nexport default function PaymentForm({ paymentData, handleNext, handleBack }) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cardName: paymentData.cardName,\r\n            cardNumber: paymentData.cardNumber\r\n        },\r\n        onSubmit: (values) => {\r\n            SaveTableData();\r\n            handleNext();\r\n        }\r\n    });\r\n    const theme = useTheme();\r\n\r\n    const inventorydataState = useSelector((state) => state.inventory);\r\n\r\n    const [AllDataList, setAllDataList] = useState([]);\r\n    const [editid, setEditId] = useState(\"\");\r\n    useEffect(() => {\r\n        const filterdata = inventorydataState.inventorydata.filter((item) => {\r\n            return Object.values(item).some((value) => value !== \"\");\r\n        })\r\n        setAllDataList(filterdata);\r\n    }, [inventorydataState]);\r\n\r\n    const handleInputChange = (id, column, value) => {\r\n        const updatedData = AllDataList.map((row) =>\r\n            row.id === id ? { ...row, [column]: value } : row\r\n        );\r\n        setAllDataList(updatedData);\r\n    };\r\n\r\n    const EditData = (id) => () => {\r\n        setEditId(id);\r\n    }\r\n\r\n    const DeleteRowData = (id) => () => {\r\n        setAllDataList(AllDataList.filter((row) => row.id != id));\r\n    }\r\n\r\n    const SaveTableData = async () => {\r\n        await dispatch(SaveInventoryData(AllDataList));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                               <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align='center' ></TableCell>\r\n                                        <TableCell align='center' colSpan={3}>Quantity M^2</TableCell>\r\n                                        <TableCell align='center' ></TableCell>\r\n                                        <TableCell align='center' colSpan={3}>Quantity M^2</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell align='center'>Look Treatment</TableCell>\r\n                                        <TableCell align='center'>Quantity m^2</TableCell>\r\n                                        <TableCell align='center'>Length</TableCell>\r\n                                        <TableCell align='center'>Quantity of slabs</TableCell>\r\n                                        <TableCell align='center'>Number of backs</TableCell>\r\n                                        <TableCell align='center'>Quantity of lboxv gel</TableCell>\r\n                                        <TableCell align='center'>Ihermal wrap lboxv gel</TableCell>\r\n                                        <TableCell align='center'>Number of sawing number</TableCell>\r\n                                        <TableCell align='center'>Swing machine number</TableCell>\r\n                                        <TableCell align='center'>Thickness(cm)</TableCell>\r\n                                        <TableCell align='center'>Material</TableCell>\r\n                                        <TableCell align='center'>Block number</TableCell>\r\n                                        <TableCell align='center'>Date of Sawing</TableCell>\r\n                                        <TableCell align='center'>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {AllDataList.map((row) => (\r\n                                        <>\r\n                                            {row.id != editid && (\r\n                                                <TableRow hover key={row.id}>\r\n                                                    {Object.keys(row).map((item, i) => (\r\n                                                        <>\r\n                                                            {item != \"id\" && (\r\n                                                                <TableCell align=\"center\" key={i}>\r\n                                                                    <TableCell align=\"center\" key={i}>{row[item]}</TableCell>\r\n                                                                </TableCell>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ))}\r\n                                                    <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                                            <EditAttributesSharp\r\n                                                                onClick={EditData(row.id)}\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500' }}\r\n                                                            />\r\n                                                            <DeleteIcon\r\n                                                                onClick={DeleteRowData(row.id)}\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500', ml: 2 }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                            {editid == row.id && (\r\n                                                <TableRow hover key={row.id}>\r\n                                                    {Object.keys(row).map((item, i) => (\r\n                                                        <>\r\n                                                            {item != \"id\" && (\r\n                                                                <TableCell align=\"center\" key={i}>\r\n                                                                    <TextField\r\n                                                                        value={row[item]}\r\n                                                                        onChange={(e) => handleInputChange(row.id, item, e.target.value)}\r\n                                                                        id=\"standard-basic\" variant=\"standard\"\r\n                                                                    />\r\n                                                                </TableCell>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ))}\r\n                                                    <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                        <IconButton onClick={DeleteRowData(row.id)} size=\"large\">\r\n                                                            <DeleteIcon\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500' }}\r\n                                                            />\r\n                                                        </IconButton>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"space-between\">\r\n                            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\r\n                                Back\r\n                            </Button>\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }}>\r\n                                    Next\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nPaymentForm.propTypes = {\r\n    paymentData: PropTypes.object,\r\n    setPaymentData: PropTypes.func,\r\n    handleNext: PropTypes.func,\r\n    handleBack: PropTypes.func,\r\n    setErrorIndex: PropTypes.func\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { dispatch } from 'store';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\nexport default function Review() {\r\n    const inventorydataState = useSelector((state) => state.inventory);\r\n\r\n    const [AllDataList, setAllDataList] = useState([]);\r\n    useEffect(() => {\r\n        const filterdata = inventorydataState.inventorydata.filter((item) => {\r\n            return Object.values(item).some((value) => value !== \"\");\r\n        })\r\n        setAllDataList(filterdata);\r\n    }, [inventorydataState]);\r\n    return (\r\n        <>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <TableContainer>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align='center' colSpan={6}></TableCell>\r\n                                    <TableCell align='center' colSpan={2}>Size(M2)</TableCell>\r\n                                    <StyledTableCell align='center'>Area of each slap(M2)</StyledTableCell>\r\n                                    <TableCell align='center'>Total Area</TableCell>\r\n                                    <TableCell align='center'>Price</TableCell>\r\n                                    <TableCell align='center'>Total Price</TableCell>\r\n                                    <TableCell align='center'></TableCell>\r\n                                    <TableCell align='center'></TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell align='center'>Item</TableCell>\r\n                                    <TableCell align='center'>Producr Name</TableCell>\r\n                                    <TableCell align='center'>Code</TableCell>\r\n                                    <TableCell align='center'>Unit</TableCell>\r\n                                    <TableCell align='center'>Teck.(CM)</TableCell>\r\n                                    <TableCell align='center'>Quantity</TableCell>\r\n                                    <TableCell align='center'>W</TableCell>\r\n                                    <TableCell align='center'>H</TableCell>\r\n                                    <TableCell align='center'>M2</TableCell>\r\n                                    <TableCell align='center'>M2</TableCell>\r\n                                    <TableCell align='center'>L.E</TableCell>\r\n                                    <TableCell align='center'>L.E</TableCell>\r\n                                    <TableCell align='center'>Picture</TableCell>\r\n                                    <TableCell align='center'>Action</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {AllDataList.map((row) => (\r\n                                    <TableRow hover key={row.id}>\r\n                                        {Object.keys(row).map((item, i) => (\r\n                                            <>\r\n                                                {item != \"id\" && (\r\n                                                    <TableCell align=\"center\" key={i}>{row[item]}</TableCell>\r\n                                                )}\r\n                                            </>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { Button, Step, Stepper, StepLabel, Stack, Typography } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\n// project imports\r\nimport BasicInfo from './BasicInfo';\r\nimport PaymentForm from './PaymentForm';\r\nimport Review from './Review';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// step options\r\nconst steps = ['Create Table Data', 'Edit Table', 'Review'];\r\n\r\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, shippingData, setShippingData, paymentData, setPaymentData) => {\r\n    switch (step) {\r\n        case 0:\r\n            return (\r\n                <BasicInfo\r\n                    handleNext={handleNext}\r\n                    setErrorIndex={setErrorIndex}\r\n                    shippingData={shippingData}\r\n                    setShippingData={setShippingData}\r\n                />\r\n            );\r\n        case 1:\r\n            return (\r\n                <PaymentForm\r\n                    handleNext={handleNext}\r\n                    handleBack={handleBack}\r\n                    setErrorIndex={setErrorIndex}\r\n                    paymentData={paymentData}\r\n                    setPaymentData={setPaymentData}\r\n                />\r\n            );\r\n        case 2:\r\n            return <Review />;\r\n        default:\r\n            throw new Error('Unknown step');\r\n    }\r\n};\r\n\r\n// ==============================|| FORMS WIZARD - BASIC ||============================== //\r\n\r\nconst InterimInvoiceWizard = () => {\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [shippingData, setShippingData] = React.useState({});\r\n    const [paymentData, setPaymentData] = React.useState({});\r\n    const [errorIndex, setErrorIndex] = React.useState(null);\r\n\r\n    const handleNext = () => {\r\n        setActiveStep(activeStep + 1);\r\n        setErrorIndex(null);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(activeStep - 1);\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Create New Invoice\">\r\n            <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\r\n                {steps.map((label, index) => {\r\n                    const labelProps = {};\r\n\r\n                    if (index === errorIndex) {\r\n                        labelProps.optional = (\r\n                            <Typography variant=\"caption\" color=\"error\">\r\n                                Error\r\n                            </Typography>\r\n                        );\r\n\r\n                        labelProps.error = true;\r\n                    }\r\n\r\n                    return (\r\n                        <Step key={label}>\r\n                            <StepLabel {...labelProps}>{label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n            <>\r\n                {activeStep === steps.length ? (\r\n                    <>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            Add all data.\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle1\">\r\n                            The data you added has been added correctly.\r\n                        </Typography>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button component={Link} to=\"/inventory/BlockProductReportDetail\"\r\n                                    variant=\"contained\"\r\n                                    color=\"success\"\r\n                                    sx={{ my: 3, ml: 1 }}\r\n                                >\r\n                                    Okay!\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {getStepContent(\r\n                            activeStep,\r\n                            handleNext,\r\n                            handleBack,\r\n                            setErrorIndex,\r\n                            shippingData,\r\n                            setShippingData,\r\n                            paymentData,\r\n                            setPaymentData\r\n                        )}\r\n                        {activeStep === steps.length - 1 && (\r\n                            <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\r\n                                {activeStep !== 0 && (\r\n                                    <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\r\n                                        Back\r\n                                    </Button>\r\n                                )}\r\n                                <AnimateButton>\r\n                                    <Button variant=\"contained\" onClick={handleNext} sx={{ my: 3, ml: 1 }}>\r\n                                        {activeStep === steps.length - 1 ? 'Add data' : 'Next'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Stack>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default InterimInvoiceWizard;\r\n","// material-ui\r\nimport { Grid } from '@mui/material';\r\n\r\n// project imports\r\nimport InterimInvoiceWizard from './ReportBlock';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// ==============================|| FORMS WIZARD ||============================== //\r\n\r\nconst FormsWizard = () => (\r\n    <Grid container spacing={gridSpacing} justifyContent=\"center\">\r\n        <Grid item xs={12}>\r\n            <InterimInvoiceWizard />\r\n        </Grid>\r\n    </Grid>\r\n);\r\n\r\nexport default FormsWizard;\r\n"],"sourceRoot":""}