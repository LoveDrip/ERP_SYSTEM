{"version":3,"sources":["views/inventory/BlockSawingReport/BlockSawingReport/BasicInfo.js","views/inventory/BlockSawingReport/BlockSawingReport/PaymentForm.js","views/inventory/BlockSawingReport/BlockSawingReport/Review.js","views/inventory/BlockSawingReport/BlockSawingReport/index.js","views/inventory/BlockSawingReport/BlockSawingReportCreate.js"],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","head","maxWidth","BasicInfo","backgroundColor","palette","common","black","color","white","shippingData","handleNext","setShippingData","formik","useFormik","initialValues","mainContractor","onSubmit","values","SaveTableData","dispatch","useDispatch","useState","AddtableData","setAddtable","a","SaveInventoryData","handleSubmit","id","Grid","container","spacing","item","xs","TableContainer","Table","sx","minWidth","size","TableHead","TableRow","align","colSpan","TableBody","map","row","hover","Object","keys","i","TextField","value","onChange","e","column","updatedData","handleInputChange","target","variant","pr","IconButton","onClick","filter","fontSize","Stack","direction","justifyContent","AnimateButton","Button","my","ml","newRow","length","productname","code","unit","tech","quantity","size_w","size_h","area_m2","total_m2","price_le","t_price_le","picture","type","PaymentForm","paymentData","handleBack","cardName","cardNumber","inventorydataState","useTheme","useSelector","state","inventory","AllDataList","setAllDataList","editid","setEditId","useEffect","filterdata","inventorydata","some","DeleteRowData","style","display","Review","steps","getStepContent","step","setErrorIndex","setPaymentData","Error","InterimInvoiceWizard","React","activeStep","setActiveStep","errorIndex","MainCard","title","Stepper","pt","pb","label","index","labelProps","optional","Typography","error","Step","StepLabel","gutterBottom","component","Link","to","FormsWizard","gridSpacing"],"mappings":"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","file":"static/js/203.9d3903a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\n//Icons\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport { SaveInventoryData } from 'store/slices/inventoryteam';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\n\r\nconst StyledTableCellGroup = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white\r\n    },\r\n}));\r\n\r\n// ==============================|| FORM WIZARD - VALIDATION  ||============================== //\r\n\r\nconst BasicInfo = ({ shippingData, setShippingData, handleNext }) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            mainContractor: shippingData.mainContractor,\r\n        },\r\n        onSubmit: (values) => {\r\n            SaveTableData();\r\n            handleNext();\r\n        }\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    const [AddtableData, setAddtable] = useState([]);\r\n\r\n    const Addtablerow = () => {\r\n        const newRow = { id: AddtableData.length + 1, item: \"\", productname: \"\", code: \"\", unit: \"\", tech: \"\", quantity: \"\", size_w: \"\", size_h: \"\", area_m2: \"\", total_m2: \"\", price_le: \"\", t_price_le: \"\", picture: \"\" };\r\n        setAddtable([...AddtableData, newRow]);\r\n    }\r\n\r\n    const handleInputChange = (id, column, value) => {\r\n        const updatedData = AddtableData.map((row) =>\r\n            row.id === id ? { ...row, [column]: value } : row\r\n        );\r\n        setAddtable(updatedData);\r\n    };\r\n\r\n    const DeleteRowData = (id) => () => {\r\n        setAddtable(AddtableData.filter((row) => row.id != id));\r\n    }\r\n\r\n    const SaveTableData = async () => {\r\n        await dispatch(SaveInventoryData(AddtableData));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align='center' colSpan={6}></TableCell>\r\n                                        <TableCell align='center' colSpan={2}>Size(M2)</TableCell>\r\n                                        <StyledTableCell align='center'>Area of each slap(M2)</StyledTableCell>\r\n                                        <TableCell align='center'>Total Area</TableCell>\r\n                                        <TableCell align='center'>Price</TableCell>\r\n                                        <TableCell align='center'>Total Price</TableCell>\r\n                                        <TableCell align='center'></TableCell>\r\n                                        <TableCell align='center'></TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell align='center'>Item</TableCell>\r\n                                        <TableCell align='center'>Producr Name</TableCell>\r\n                                        <TableCell align='center'>Code</TableCell>\r\n                                        <TableCell align='center'>Unit</TableCell>\r\n                                        <TableCell align='center'>Teck.(CM)</TableCell>\r\n                                        <TableCell align='center'>Quantity</TableCell>\r\n                                        <TableCell align='center'>W</TableCell>\r\n                                        <TableCell align='center'>H</TableCell>\r\n                                        <TableCell align='center'>M2</TableCell>\r\n                                        <TableCell align='center'>M2</TableCell>\r\n                                        <TableCell align='center'>L.E</TableCell>\r\n                                        <TableCell align='center'>L.E</TableCell>\r\n                                        <TableCell align='center'>Picture</TableCell>\r\n                                        <TableCell align='center'>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n\r\n                                    {AddtableData.map((row) => (\r\n                                        <TableRow hover key={row.id}>\r\n                                            {Object.keys(row).map((item, i) => (\r\n                                                <>\r\n                                                    {item != \"id\" && (\r\n                                                        <TableCell align=\"center\" key={i}>\r\n                                                            <TextField\r\n                                                                value={row[item]}\r\n                                                                onChange={(e) => handleInputChange(row.id, item, e.target.value)}\r\n                                                                id=\"standard-basic\" variant=\"standard\"\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    )}\r\n                                                </>\r\n                                            ))}\r\n\r\n                                            <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                <IconButton onClick={DeleteRowData(row.id)} size=\"large\">\r\n                                                    <DeleteIcon\r\n                                                        fontSize=\"small\"\r\n                                                        aria-controls=\"menu-popular-card-1\"\r\n                                                        aria-haspopup=\"true\"\r\n                                                        sx={{ color: 'grey.500' }}\r\n                                                    />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} onClick={Addtablerow}>\r\n                                    AddTable\r\n                                </Button>\r\n                                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\">\r\n                                    Next\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nBasicInfo.propTypes = {\r\n    shippingData: PropTypes.object,\r\n    setShippingData: PropTypes.func,\r\n    handleNext: PropTypes.func,\r\n    setErrorIndex: PropTypes.func\r\n};\r\n\r\nexport default BasicInfo;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\n//Icons\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport EditAttributesSharp from '@mui/icons-material/Edit';\r\n\r\n//redux\r\nimport { SaveInventoryData } from 'store/slices/inventoryteam';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\n\r\nexport default function PaymentForm({ paymentData, handleNext, handleBack }) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cardName: paymentData.cardName,\r\n            cardNumber: paymentData.cardNumber\r\n        },\r\n        onSubmit: (values) => {\r\n            SaveTableData();\r\n            handleNext();\r\n        }\r\n    });\r\n    const theme = useTheme();\r\n\r\n    const inventorydataState = useSelector((state) => state.inventory);\r\n\r\n    const [AllDataList, setAllDataList] = useState([]);\r\n    const [editid, setEditId] = useState(\"\");\r\n    useEffect(() => {\r\n        const filterdata = inventorydataState.inventorydata.filter((item) => {\r\n            return Object.values(item).some((value) => value !== \"\");\r\n        })\r\n        setAllDataList(filterdata);\r\n    }, [inventorydataState]);\r\n\r\n    const handleInputChange = (id, column, value) => {\r\n        const updatedData = AllDataList.map((row) =>\r\n            row.id === id ? { ...row, [column]: value } : row\r\n        );\r\n        setAllDataList(updatedData);\r\n    };\r\n\r\n    const EditData = (id) => () => {\r\n        setEditId(id);\r\n    }\r\n\r\n    const DeleteRowData = (id) => () => {\r\n        setAllDataList(AllDataList.filter((row) => row.id != id));\r\n    }\r\n\r\n    const SaveTableData = async () => {\r\n        await dispatch(SaveInventoryData(AllDataList));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align='center' colSpan={6}></TableCell>\r\n                                        <TableCell align='center' colSpan={2}>Size(M2)</TableCell>\r\n                                        <StyledTableCell align='center'>Area of each slap(M2)</StyledTableCell>\r\n                                        <TableCell align='center'>Total Area</TableCell>\r\n                                        <TableCell align='center'>Price</TableCell>\r\n                                        <TableCell align='center'>Total Price</TableCell>\r\n                                        <TableCell align='center'></TableCell>\r\n                                        <TableCell align='center'></TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell align='center'>Item</TableCell>\r\n                                        <TableCell align='center'>Producr Name</TableCell>\r\n                                        <TableCell align='center'>Code</TableCell>\r\n                                        <TableCell align='center'>Unit</TableCell>\r\n                                        <TableCell align='center'>Teck.(CM)</TableCell>\r\n                                        <TableCell align='center'>Quantity</TableCell>\r\n                                        <TableCell align='center'>W</TableCell>\r\n                                        <TableCell align='center'>H</TableCell>\r\n                                        <TableCell align='center'>M2</TableCell>\r\n                                        <TableCell align='center'>M2</TableCell>\r\n                                        <TableCell align='center'>L.E</TableCell>\r\n                                        <TableCell align='center'>L.E</TableCell>\r\n                                        <TableCell align='center'>Picture</TableCell>\r\n                                        <TableCell align='center'>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {AllDataList.map((row) => (\r\n                                        <>\r\n                                            {row.id != editid && (\r\n                                                <TableRow hover key={row.id}>\r\n                                                    {Object.keys(row).map((item, i) => (\r\n                                                        <>\r\n                                                            {item != \"id\" && (\r\n                                                                <TableCell align=\"center\" key={i}>\r\n                                                                    <TableCell align=\"center\" key={i}>{row[item]}</TableCell>\r\n                                                                </TableCell>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ))}\r\n                                                    <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                                            <EditAttributesSharp\r\n                                                                onClick={EditData(row.id)}\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500' }}\r\n                                                            />\r\n                                                            <DeleteIcon\r\n                                                                onClick={DeleteRowData(row.id)}\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500', ml: 2 }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                            {editid == row.id && (\r\n                                                <TableRow hover key={row.id}>\r\n                                                    {Object.keys(row).map((item, i) => (\r\n                                                        <>\r\n                                                            {item != \"id\" && (\r\n                                                                <TableCell align=\"center\" key={i}>\r\n                                                                    <TextField\r\n                                                                        value={row[item]}\r\n                                                                        onChange={(e) => handleInputChange(row.id, item, e.target.value)}\r\n                                                                        id=\"standard-basic\" variant=\"standard\"\r\n                                                                    />\r\n                                                                </TableCell>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ))}\r\n                                                    <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                                        <IconButton onClick={DeleteRowData(row.id)} size=\"large\">\r\n                                                            <DeleteIcon\r\n                                                                fontSize=\"small\"\r\n                                                                aria-controls=\"menu-popular-card-1\"\r\n                                                                aria-haspopup=\"true\"\r\n                                                                sx={{ color: 'grey.500' }}\r\n                                                            />\r\n                                                        </IconButton>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"space-between\">\r\n                            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\r\n                                Back\r\n                            </Button>\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }}>\r\n                                    Next\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nPaymentForm.propTypes = {\r\n    paymentData: PropTypes.object,\r\n    setPaymentData: PropTypes.func,\r\n    handleNext: PropTypes.func,\r\n    handleBack: PropTypes.func,\r\n    setErrorIndex: PropTypes.func\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Grid, Table, TableBody, TableCell, Stack, tableCellClasses, Card, IconButton, Menu, MenuItem, CardContent, Button, TextField, TableContainer, TableHead, TableRow, Tooltip, Fab } from '@mui/material';\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { dispatch } from 'store';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        maxWidth: 50\r\n    }\r\n}));\r\nexport default function Review() {\r\n    const inventorydataState = useSelector((state) => state.inventory);\r\n\r\n    const [AllDataList, setAllDataList] = useState([]);\r\n    useEffect(() => {\r\n        const filterdata = inventorydataState.inventorydata.filter((item) => {\r\n            return Object.values(item).some((value) => value !== \"\");\r\n        })\r\n        setAllDataList(filterdata);\r\n    }, [inventorydataState]);\r\n    return (\r\n        <>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <TableContainer>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align='center' colSpan={6}></TableCell>\r\n                                    <TableCell align='center' colSpan={2}>Size(M2)</TableCell>\r\n                                    <StyledTableCell align='center'>Area of each slap(M2)</StyledTableCell>\r\n                                    <TableCell align='center'>Total Area</TableCell>\r\n                                    <TableCell align='center'>Price</TableCell>\r\n                                    <TableCell align='center'>Total Price</TableCell>\r\n                                    <TableCell align='center'></TableCell>\r\n                                    <TableCell align='center'></TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell align='center'>Item</TableCell>\r\n                                    <TableCell align='center'>Producr Name</TableCell>\r\n                                    <TableCell align='center'>Code</TableCell>\r\n                                    <TableCell align='center'>Unit</TableCell>\r\n                                    <TableCell align='center'>Teck.(CM)</TableCell>\r\n                                    <TableCell align='center'>Quantity</TableCell>\r\n                                    <TableCell align='center'>W</TableCell>\r\n                                    <TableCell align='center'>H</TableCell>\r\n                                    <TableCell align='center'>M2</TableCell>\r\n                                    <TableCell align='center'>M2</TableCell>\r\n                                    <TableCell align='center'>L.E</TableCell>\r\n                                    <TableCell align='center'>L.E</TableCell>\r\n                                    <TableCell align='center'>Picture</TableCell>\r\n                                    <TableCell align='center'>Action</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {AllDataList.map((row) => (\r\n                                    <TableRow hover key={row.id}>\r\n                                        {Object.keys(row).map((item, i) => (\r\n                                            <>\r\n                                                {item != \"id\" && (\r\n                                                    <TableCell align=\"center\" key={i}>{row[item]}</TableCell>\r\n                                                )}\r\n                                            </>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { Button, Step, Stepper, StepLabel, Stack, Typography } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\n// project imports\r\nimport BasicInfo from './BasicInfo';\r\nimport PaymentForm from './PaymentForm';\r\nimport Review from './Review';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// step options\r\nconst steps = ['Create Table Data', 'Edit Table', 'Review'];\r\n\r\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, shippingData, setShippingData, paymentData, setPaymentData) => {\r\n    switch (step) {\r\n        case 0:\r\n            return (\r\n                <BasicInfo\r\n                    handleNext={handleNext}\r\n                    setErrorIndex={setErrorIndex}\r\n                    shippingData={shippingData}\r\n                    setShippingData={setShippingData}\r\n                />\r\n            );\r\n        case 1:\r\n            return (\r\n                <PaymentForm\r\n                    handleNext={handleNext}\r\n                    handleBack={handleBack}\r\n                    setErrorIndex={setErrorIndex}\r\n                    paymentData={paymentData}\r\n                    setPaymentData={setPaymentData}\r\n                />\r\n            );\r\n        case 2:\r\n            return <Review />;\r\n        default:\r\n            throw new Error('Unknown step');\r\n    }\r\n};\r\n\r\n// ==============================|| FORMS WIZARD - BASIC ||============================== //\r\n\r\nconst InterimInvoiceWizard = () => {\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [shippingData, setShippingData] = React.useState({});\r\n    const [paymentData, setPaymentData] = React.useState({});\r\n    const [errorIndex, setErrorIndex] = React.useState(null);\r\n\r\n    const handleNext = () => {\r\n        setActiveStep(activeStep + 1);\r\n        setErrorIndex(null);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(activeStep - 1);\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Create New Invoice\">\r\n            <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\r\n                {steps.map((label, index) => {\r\n                    const labelProps = {};\r\n\r\n                    if (index === errorIndex) {\r\n                        labelProps.optional = (\r\n                            <Typography variant=\"caption\" color=\"error\">\r\n                                Error\r\n                            </Typography>\r\n                        );\r\n\r\n                        labelProps.error = true;\r\n                    }\r\n\r\n                    return (\r\n                        <Step key={label}>\r\n                            <StepLabel {...labelProps}>{label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n            <>\r\n                {activeStep === steps.length ? (\r\n                    <>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            Add all data.\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle1\">\r\n                            The data you added has been added correctly.\r\n                        </Typography>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button component={Link} to=\"/inventory/reportblockdetail\"\r\n                                    variant=\"contained\"\r\n                                    color=\"success\"\r\n                                    sx={{ my: 3, ml: 1 }}\r\n                                >\r\n                                    Okay!\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {getStepContent(\r\n                            activeStep,\r\n                            handleNext,\r\n                            handleBack,\r\n                            setErrorIndex,\r\n                            shippingData,\r\n                            setShippingData,\r\n                            paymentData,\r\n                            setPaymentData\r\n                        )}\r\n                        {activeStep === steps.length - 1 && (\r\n                            <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\r\n                                {activeStep !== 0 && (\r\n                                    <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\r\n                                        Back\r\n                                    </Button>\r\n                                )}\r\n                                <AnimateButton>\r\n                                    <Button variant=\"contained\" onClick={handleNext} sx={{ my: 3, ml: 1 }}>\r\n                                        {activeStep === steps.length - 1 ? 'Add data' : 'Next'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Stack>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default InterimInvoiceWizard;\r\n","// material-ui\r\nimport { Grid } from '@mui/material';\r\n\r\n// project imports\r\nimport InterimInvoiceWizard from './BlockSawingReport';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// ==============================|| FORMS WIZARD ||============================== //\r\n\r\nconst FormsWizard = () => (\r\n    <Grid container spacing={gridSpacing} justifyContent=\"center\">\r\n        <Grid item xs={12}>\r\n            <InterimInvoiceWizard />\r\n        </Grid>\r\n    </Grid>\r\n);\r\n\r\nexport default FormsWizard;\r\n"],"sourceRoot":""}